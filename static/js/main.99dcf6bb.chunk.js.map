{"version":3,"sources":["utils/gameHelpers.ts","components/Cell.tsx","components/Display.tsx","components/Stage.tsx","components/StyledButton.tsx","utils/useStage.tsx","App.tsx","utils/usePlayer.tsx","utils/useGameStatus.tsx","utils/useInterval.tsx","index.tsx"],"names":["createStage","Array","from","fill","checkCollision","player","stage","position","playerX","x","playerY","y","moveX","moveY","tetromino","length","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randomNumber","Math","floor","random","Object","keys","console","error","CellComponent","type","StyledCell","memo","styled","div","props","Display","gameOver","text","className","StyledDisplay","StyledText","id","StyledInput","aria-describedby","htmlFor","span","input","Stage","width","height","StyledTetris","map","row","rowId","cell","cellId","Cell","StartButton","button","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","forEach","value","collided","reduce","acc","findIndex","prev","unshift","push","sweepRows","App","setGameOver","gameSpeed","setGameSpeed","prePauseSpeed","setPrePauseSpeed","setPlayer","rotate","matrix","_","idx","col","reverse","useCallback","STAGE_WIDTH","updatePlayerPosition","playerRotate","clonedPlayer","JSON","parse","stringify","storedPosition","offset","usePlayer","score","setScore","rows","setRows","level","setLevel","calcScore","linePoints","useGameStatus","callback","delay","savedCallback","useRef","current","setInterval","clearInterval","useInterval","drop","filter","log","moveLaterally","dir","linesToDrop","playerDrop","pressedSpacebar","hasCollided","next","role","tabIndex","onKeyDown","e","preventDefault","key","onKeyUp","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.99dcf6bb.chunk.js","sourcesContent":["\nimport { PlayerProps, TETROMINOS_TYPE, Cell, TetrominosShape } from \"../types\"\n\nexport const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\nexport const createStage = (): Cell[][] => {\n  return Array.from(Array(STAGE_HEIGHT), () => new Array(STAGE_WIDTH).fill([0, 'clear']))\n}\n\nexport const checkCollision = (player: PlayerProps, stage: Cell[][], position: ({ x: number, y: number })): boolean => {\n  const { x: playerX, y: playerY } = player.position || {}\n  const { x: moveX, y: moveY } = position || {}\n  for (let y = 0; y < player.tetromino.length; y++) {\n    for (let x = 0; x < player.tetromino[y].length; x++) {\n      if (player.tetromino[y][x] !== 0) {\n        // Check inside game area, and not moving to a blocked cell\n        if (!stage[y + playerY + moveY] ||\n          !stage[y + playerY + moveY][x + playerX + moveX] ||\n          stage[y + playerY + moveY][x + playerX + moveX][1] !== 'clear'\n        ) {\n          return true\n        }\n      }\n    }\n  }\n  return false\n}\n\n\nexport const TETROMINOS: {\n  0: {\n    shape: TetrominosShape,\n    color: string;\n  },\n  I: {\n    shape: TetrominosShape,\n    color: string;\n  },\n  J: {\n    shape: TetrominosShape,\n    color: string;\n  },\n  L: {\n    shape: TetrominosShape,\n    color: string;\n  },\n  O: {\n    shape: TetrominosShape,\n    color: string;\n  },\n  S: {\n    shape: TetrominosShape,\n    color: string;\n  },\n  T: {\n    shape: TetrominosShape,\n    color: string;\n  },\n  Z: {\n    shape: TetrominosShape,\n    color: string;\n  },\n} = {\n  0: { shape: [[0]], color: '0,0,0' },\n  I: { shape: [[0, 'I', 0, 0], [0, 'I', 0, 0], [0, 'I', 0, 0], [0, 'I', 0, 0]], color: '80,227,230' },\n  J: { shape: [[0, 'J', 0], [0, 'J', 0], ['J', 'J', 0]], color: '36,95,223' },\n  L: { shape: [[0, 'L', 0], [0, 'L', 0], [0, 'L', 'L']], color: '223,173,36' },\n  O: { shape: [['O', 'O'], ['O', 'O']], color: '223,217,36' },\n  S: { shape: [[0, 'S', 'S'], ['S', 'S', 0], [0, 0, 0]], color: '48,211,56' },\n  T: { shape: [[0, 0, 0], ['T', 'T', 'T'], [0, 'T', 0]], color: '132,51,198' },\n  Z: { shape: [['Z', 'Z', 0], [0, 'Z', 'Z'], [0, 0, 0]], color: '227,78,78' },\n}\n\nexport const randomTetromino = (): TETROMINOS_TYPE => {\n  const randomNumber = Math.floor(Math.random() * (Object.keys(TETROMINOS).length - 1));\n  switch (randomNumber) {\n    case 0:\n      return TETROMINOS['I'];\n    case 1:\n      return TETROMINOS['J'];\n    case 2:\n      return TETROMINOS['L'];\n    case 3:\n      return TETROMINOS['O'];\n    case 4:\n      return TETROMINOS['S'];\n    case 5:\n      return TETROMINOS['T'];\n    case 6:\n      return TETROMINOS['Z'];\n    default:\n      console.error('Invalid Random Tetromino', randomNumber)\n      return TETROMINOS[0];\n  }\n}\n\n","import { memo } from \"react\";\nimport styled from \"styled-components\";\n\nimport { TETROMINOS } from \"../utils/gameHelpers\";\nimport { TetrominoType } from \"../types\";\n\nconst CellComponent: React.FC<{ type: TetrominoType }> = ({ type }) => {\n  return <StyledCell color={TETROMINOS[type].color} />;\n};\n\nexport default memo(CellComponent);\n\nconst StyledCell = styled.div<{ color: string }>`\n  background: rgba(${(props) => props.color}, 0.8);\n  border: 0.5rem solid;\n  border-bottom-color: rgba(${(props) => props.color}, 0.1);\n  border-right-color: rgba(${(props) => props.color}, 1);\n  border-top-color: rgba(${(props) => props.color}, 1);\n  border-left-color: rgba(${(props) => props.color}, 0.3);\n`;\n","import styled from \"styled-components\";\n\ninterface DisplayProps {\n  gameOver?: boolean;\n  text: string;\n}\n\nexport const Display: React.FC<DisplayProps> = ({\n  gameOver = false,\n  text = \"\",\n}) => {\n  return (\n    <div className=\"col-6 col-md-12\">\n      <StyledDisplay className=\"input-group\">\n        <div className=\"input-group-prepend\">\n          <StyledText className=\"input-group-text\" id=\"basic-addon3\">\n            {text}\n          </StyledText>\n        </div>\n        <StyledInput\n          type=\"text\"\n          className=\"form-control\"\n          id={text}\n          aria-describedby=\"basic-addon3\"\n        />\n      </StyledDisplay>\n      <label htmlFor={text} className=\"sr-only\">\n        {text}\n      </label>\n    </div>\n  );\n};\n\nconst StyledDisplay = styled.div`\n  background-color: #111;\n  border-radius: 1rem;\n  // width: 100%;\n  max-width: 200px;\n  padding: 0;\n  margin-bottom: 0.5rem;\n`;\n\nconst StyledText = styled.span`\n  color: white;\n  font-weight: 800;\n  font-size: 1rem;\n  padding: 0.75rem;\n  text-align: center;\n  background-color: transparent;\n  border: 4px solid grey;\n  border-right: none;\n  border-radius: 1rem 0 0 1rem;\n  @media screen and (min-width: 768px) {\n    font-size: 1.25rem;\n  }\n`;\nconst StyledInput = styled.input`\n  color: white;\n  font-weight: 800;\n  font-size: 1rem;\n  padding: 0.75rem;\n  text-align: center;\n  background-color: transparent;\n  border: 4px solid grey;\n  border-right: none;\n  border-radius: 1rem 0 0 1rem;\n  padding-left: 0;\n  border: 4px solid grey;\n  border-left: none;\n  border-radius: 0 1rem 1rem 0;\n  @media screen and (min-width: 768px) {\n    font-size: 1.25rem;\n  }\n`;\n","import styled from \"styled-components\";\n\nimport CellComponent from \"./Cell\";\nimport { Cell } from \"../types\";\n\ninterface StageProps {\n  stage: Cell[][];\n}\n\nexport const Stage: React.FC<StageProps> = ({ stage = [] }) => {\n  const width = stage.length ? stage[0].length : 0;\n  const height = stage.length;\n  return (\n    <div className=\"game-area\">\n      <StyledTetris width={width} height={height}>\n        {stage.map((row: Cell[], rowId: number) =>\n          row.map((cell: Cell, cellId: number) => (\n            <CellComponent key={`${rowId}-${cellId}`} type={cell[0]} />\n          ))\n        )}\n      </StyledTetris>\n    </div>\n  );\n};\n\nconst StyledTetris = styled.div<{ width: number; height: number }>`\n  display: grid;\n  /* grid-template-rows: repeat(\n    ${(props) => props.height},\n    calc(2vw / ${(props) => props.width})\n  ); */\n  grid-template-rows: repeat(20, 3vw);\n  grid-template-columns: repeat(${(props) => props.width}, auto);\n  grid-gap: 1px;\n  border: 2px solid #333;\n  width: 100%;\n  height: 100%;\n  max-width: 40vw;\n  background: #333;\n`;\n","import styled from \"styled-components\";\n\nexport const StartButton = styled.button`\n  padding: 0.5rem 1rem;\n  color: white;\n  background-color: red;\n  text-transform: uppercase;\n  font-weight: 800;\n  font-size: 1.25rem;\n  border-radius: 1rem;\n`;\n","import { useState, useEffect } from \"react\";\n\nimport { createStage } from \".\";\nimport { TetrominoType, PlayerProps, Cell } from \"../types\";\n\ninterface useStageReturn {\n  stage: Cell[][];\n  setStage: React.Dispatch<React.SetStateAction<Cell[][]>>;\n  rowsCleared: number;\n}\n\nexport const useStage = (\n  player: PlayerProps,\n  resetPlayer: () => void\n): useStageReturn => {\n  const [stage, setStage] = useState<Cell[][]>(createStage());\n  const [rowsCleared, setRowsCleared] = useState<number>(0);\n\n  useEffect(() => {\n    setRowsCleared(0);\n    const sweepRows = (newStage: Cell[][]) =>\n      newStage.reduce((acc: Cell[][], row: Cell[]) => {\n        if (row.findIndex((cell) => cell[0] === 0) === -1) {\n          setRowsCleared((prev) => prev + 1);\n          acc.unshift(new Array(newStage[0].length).fill([0, \"clear\"]));\n          return acc;\n        }\n        acc.push(row);\n        return acc;\n      }, [] as Cell[][]);\n\n    const updateStage = (prevStage: Cell[][]) => {\n      const newStage: Cell[][] = prevStage.map((row) =>\n        row.map((cell) => (cell[1] === \"clear\" ? [0, \"clear\"] : cell))\n      );\n\n      // Draw\n      player.tetromino.forEach((row: TetrominoType[], y: number) => {\n        row.forEach((value: TetrominoType, x: number) => {\n          if (value !== 0) {\n            newStage[y + player.position.y][x + player.position.x] = [\n              value,\n              player.collided ? \"merged\" : \"clear\",\n            ];\n          }\n        });\n      });\n\n      // Check if we collided\n      if (player.collided) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n\n      return newStage;\n    };\n\n    setStage((prev) => updateStage(prev));\n  }, [player, resetPlayer]);\n\n  return { stage, setStage, rowsCleared };\n};\n","import { useState } from \"react\";\nimport { Stage, Display, StartButton } from \"./components\";\n\nimport {\n  useStage,\n  usePlayer,\n  createStage,\n  checkCollision,\n  useInterval,\n  useGameStatus,\n} from \"./utils\";\nimport { PlayerProps } from \"./types\";\n\nfunction App() {\n  const [gameOver, setGameOver] = useState<boolean>(false);\n  const [gameSpeed, setGameSpeed] = useState<number>(0);\n  const [prePauseSpeed, setPrePauseSpeed] = useState<number>(0);\n\n  const {\n    player,\n    updatePlayerPosition,\n    resetPlayer,\n    playerRotate,\n  } = usePlayer();\n\n  const { stage, setStage, rowsCleared } = useStage(\n    player as PlayerProps,\n    resetPlayer as () => void\n  );\n\n  const { level, rows, score, setLevel, setRows, setScore } = useGameStatus(\n    rowsCleared\n  );\n\n  useInterval(() => {\n    drop();\n\n    // Increase level when player has cleared 10 rows\n    if (rows > (level + 1) * 10) {\n      setLevel((prev) => prev + 1);\n      setGameSpeed(1000 / (level + 1) + 200);\n    }\n\n    //Check gameover\n    if (!!stage[0].filter((cell) => cell[1] === \"merged\").length) {\n      console.log(`¡GAME OVER! --- You scored: ${score} points!`);\n      setGameOver(true);\n      setGameSpeed(0);\n    }\n  }, gameSpeed);\n\n  const move = (e: React.KeyboardEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    if (!gameOver) {\n      switch (e.key) {\n        case \"ArrowLeft\":\n          moveLaterally(-1);\n          break;\n        case \"ArrowRight\":\n          moveLaterally(1);\n          break;\n        case \"ArrowDown\":\n          playerDrop();\n          break;\n        case \"ArrowUp\":\n          playerRotate(stage);\n          break;\n        case \" \":\n          playerDrop(true);\n          break;\n      }\n    }\n  };\n\n  const moveLaterally = (dir: number) => {\n    if (\n      !checkCollision(player, stage, {\n        x: dir,\n        y: 0,\n      })\n    ) {\n      updatePlayerPosition({ x: dir, y: 0 }, false);\n    }\n  };\n\n  const startGame = () => {\n    // Reset All\n    setStage(createStage());\n    resetPlayer();\n    setGameOver(false);\n    setGameSpeed(1000 / (level + 1) + 200);\n    setLevel(0);\n    setScore(0);\n    setRows(0);\n  };\n\n  const pauseGame = () => {\n    if (!!gameSpeed) {\n      setPrePauseSpeed(gameSpeed);\n      return setGameSpeed(0);\n    }\n    return setGameSpeed(prePauseSpeed);\n  };\n\n  const drop = (linesToDrop: number = 1) => {\n    if (!checkCollision(player, stage, { x: 0, y: linesToDrop })) {\n      return updatePlayerPosition({ x: 0, y: linesToDrop }, false);\n    }\n\n    updatePlayerPosition({ x: 0, y: linesToDrop - 1 }, true);\n  };\n\n  const keyUp = (e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (!gameOver) {\n      if (e.key === \"ArrowDown\" || e.key === \" \") {\n        setGameSpeed(1000 / (level + 1) + 200);\n      }\n    }\n  };\n\n  const playerDrop = (pressedSpacebar: boolean = false) => {\n    setGameSpeed(0);\n\n    if (!pressedSpacebar) {\n      return drop();\n    }\n\n    let hasCollided = false;\n    let next = 1;\n    while (!hasCollided) {\n      next++;\n      if (checkCollision(player, stage, { x: 0, y: next })) {\n        hasCollided = true;\n      }\n    }\n    drop(next);\n  };\n\n  return (\n    <div\n      className=\"my-app p-4\"\n      role=\"button\"\n      tabIndex={0}\n      onKeyDown={move}\n      onKeyUp={keyUp}\n    >\n      <div className=\"text-center py-4\">\n        <h1 className=\"text-white\">TETRIS APP</h1>\n      </div>\n      <div className=\"tetris-app\">\n        <Stage stage={stage} />\n        <aside className=\"row score-area\">\n          {gameOver ? <p>gameover</p> : null}\n          <Display text={`Score:  ${score}`} />\n          <Display text={`Rows:  ${rows}`} />\n          <Display text={`Level:  ${level}`} />\n          <div className=\"col-6 col-md-12\">\n            <StartButton\n              className=\"btn btn-block\"\n              // disabled={!gameOver}\n              onClick={startGame}\n            >\n              Start Again\n            </StartButton>\n            <button\n              className={`btn btn-block ${gameOver && \"d-none\"}`}\n              onClick={pauseGame}\n            >\n              Pause Game\n            </button>\n          </div>\n        </aside>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { useState, useCallback } from \"react\";\n\nimport { checkCollision, randomTetromino, STAGE_WIDTH, TETROMINOS } from \"./\";\n\nimport { Cell, PlayerProps, Position, TetrominosShape } from \"../types\";\n\ninterface usePlayerReturn {\n  player: PlayerProps;\n  updatePlayerPosition: (position: Position, collided: boolean) => void;\n  resetPlayer: () => void;\n  playerRotate: (stage: Cell[][]) => void;\n}\n\nexport const usePlayer = (): usePlayerReturn => {\n  const [player, setPlayer] = useState<PlayerProps>({\n    position: { x: 0, y: 0 },\n    tetromino: TETROMINOS[0].shape,\n    collided: false,\n  });\n\n  const rotate = (matrix: TetrominosShape): TetrominosShape => {\n    const rotated = matrix.map((_, idx) => matrix.map((col) => col[idx]));\n    return rotated.map((row) => row.reverse());\n  };\n\n  const playerRotate = (stage: Cell[][]) => {\n    const clonedPlayer = JSON.parse(JSON.stringify(player)) as PlayerProps;\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino) as TetrominosShape;\n\n    let storedPosition = clonedPlayer.position.x;\n    let offset = 1;\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\n      clonedPlayer.position.x += offset;\n      offset = -(offset + (offset > 0 ? 1 : -1));\n      if (offset > clonedPlayer.tetromino[0].length) {\n        rotate(clonedPlayer.tetromino);\n        clonedPlayer.position.x = storedPosition;\n        return;\n      }\n    }\n    setPlayer(clonedPlayer);\n  };\n\n  const updatePlayerPosition = (position: Position, collided: boolean) => {\n    return setPlayer((prev) => ({\n      ...prev,\n      position: {\n        x: prev.position.x + position.x,\n        y: prev.position.y + position.y,\n      },\n      collided,\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    return setPlayer({\n      position: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n      tetromino: randomTetromino().shape,\n      collided: false,\n    });\n  }, []);\n\n  return { player, updatePlayerPosition, resetPlayer, playerRotate };\n};\n","import { useState, useEffect, useCallback } from \"react\";\n\nexport const useGameStatus = (rowsCleared: number) => {\n  const [score, setScore] = useState<number>(0);\n  const [rows, setRows] = useState<number>(0);\n  const [level, setLevel] = useState<number>(0);\n\n  const calcScore = useCallback(() => {\n    const linePoints = [40, 100, 300, 1200];\n\n    if (rowsCleared > 0) {\n      setScore((prev) => prev + linePoints[rowsCleared - 1] * (level + 1));\n      setRows((prev) => prev + rowsCleared);\n    }\n  }, [level, rowsCleared]);\n\n  useEffect(() => {\n    calcScore();\n  }, [calcScore]);\n\n  return { score, setScore, rows, setRows, level, setLevel };\n};\n","import { useEffect, useRef } from \"react\";\n\nexport function useInterval(callback: () => void, delay: number) {\n  // const savedCallback = useRef<ReturnType<typeof setInterval>>();\n\n  const savedCallback = useRef(callback);\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    if (!!delay) {\n      const id = setInterval(() => savedCallback.current(), delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport \"./assets/styles/main.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}