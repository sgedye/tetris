{"version":3,"sources":["theme.ts","components/Buttons.tsx","utils/gameHelpers.ts","components/Cell.tsx","components/GameOver.tsx","assets/gfx/keyboard.png","components/Legend.tsx","components/Stage.tsx","components/UpNext.tsx","utils/checkGameOver.ts","utils/useGameStatus.tsx","utils/useStage.tsx","assets/gfx/arrows.png","App.tsx","utils/usePlayer.tsx","utils/useInterval.tsx","index.tsx"],"names":["theme","Buttons","gameOver","gamePaused","className","handleStartGame","handlePauseGame","classnames","style","minWidth","maxWidth","StartButton","disabled","onClick","PauseButton","active","styled","button","p","createStage","Array","from","fill","checkCollision","player","stage","position","playerX","x","playerY","y","moveX","moveY","tetromino","length","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randomNumber","Math","floor","random","Object","keys","console","error","CellComponent","type","StyledCell","memo","div","GameOver","highscore","topScore","startNewGame","GameOverOverlay","HighscoreBox","Highscore","toLocaleString","StyledButton","h1","data","Legend","LegendBlock","StyledList","map","datum","idx","StyledListItem","LegendIcon","img","keyboard","ul","li","span","Stage","width","StyledTetris","row","rowId","cell","cellId","Cell","Overlay","miniStage","UpNext","nextTetromino","undefined","checkGameOver","isGameOver","forEach","colId","linePoints","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","value","collided","reduce","acc","findIndex","prev","unshift","push","sweepRows","App","setGameOver","setGamePaused","gameSpeed","setGameSpeed","prePauseSpeed","setPrePauseSpeed","setHighscore","showConfetti","setShowConfetti","setNextTetromino","setPlayer","rotate","matrix","_","col","reverse","useCallback","STAGE_WIDTH","updatePlayerPosition","playerRotate","clonedPlayer","JSON","parse","stringify","storedPosition","offset","usePlayer","score","setScore","rows","setRows","level","setLevel","calcScore","useGameStatus","_highscore","localStorage","getItem","parseInt","handleGameOver","setItem","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","drop","moveLaterally","dir","startGame","pauseGame","linesToDrop","playerDrop","pressedSpacebar","hasCollided","next","role","tabIndex","onKeyDown","e","preventDefault","key","onKeyUp","AppTitle","StyledDisplay","UpNextWrapper","HighscoreWrapper","Control","arrows","ReactDOM","render","document","getElementById"],"mappings":"yNAAaA,EAIH,UAJGA,EAKF,UALEA,EAOJ,UAPIA,EAQL,U,OCIKC,EAAkC,SAAC,GAMzC,IALLC,EAKI,EALJA,SACAC,EAII,EAJJA,WAII,IAHJC,iBAGI,MAHQ,GAGR,EAFJC,EAEI,EAFJA,gBACAC,EACI,EADJA,gBAEA,OACE,sBACEF,UAAWG,IAAW,UAAWH,GACjCI,MAAO,CAAEC,SAAU,QAASC,SAAU,SAFxC,UAIE,cAACC,EAAD,CACEP,UAAS,6BACPF,EAAW,cAAgB,iBAE7BU,SAAUT,EACVU,QAASR,EALX,yBASA,cAACS,EAAD,CACEC,OAAQZ,EACRS,SAAUV,EACVE,UAAU,gBACVS,QAASP,EAJX,SAMGH,EAAa,cAAgB,mBAMhCQ,EAAcK,IAAOC,OAAV,uJAQXH,EAAcE,YAAOL,EAAPK,CAAH,8FACKhB,GACX,SAACkB,GAAD,OAAQA,EAAEH,OAASf,EAAaA,KACrB,SAACkB,GAAD,OAAQA,EAAEH,OAASf,EAAgB,iBClD5CmB,EAAc,WACzB,OAAOC,MAAMC,KAAKD,MAHQ,KAGa,kBAAM,IAAIA,MAJxB,IAI2CE,KAAK,CAAC,EAAG,cAGlEC,EAAiB,SAACC,EAAqBC,EAAiBC,GAGnE,IAHsH,IAAD,EAClFF,EAAOE,UAAY,GAA3CC,EAD0G,EAC7GC,EAAeC,EAD8F,EACjGC,EADiG,EAEtFJ,GAAY,GAAhCK,EAF0G,EAE7GH,EAAaI,EAFgG,EAEnGF,EACTA,EAAI,EAAGA,EAAIN,EAAOS,UAAUC,OAAQJ,IAC3C,IAAK,IAAIF,EAAI,EAAGA,EAAIJ,EAAOS,UAAUH,GAAGI,OAAQN,IAC9C,GAA+B,IAA3BJ,EAAOS,UAAUH,GAAGF,MAEjBH,EAAMK,EAAID,EAAUG,KACtBP,EAAMK,EAAID,EAAUG,GAAOJ,EAAID,EAAUI,IACa,UAAvDN,EAAMK,EAAID,EAAUG,GAAOJ,EAAID,EAAUI,GAAO,IAEhD,OAAO,EAKf,OAAO,GAIII,EAiCT,CACFC,EAAG,CAAEC,MAAO,CAAC,CAAC,IAAKC,MAAO,SAC1BC,EAAG,CAAEF,MAAO,CAAC,CAAC,EAAG,IAAK,EAAG,GAAI,CAAC,EAAG,IAAK,EAAG,GAAI,CAAC,EAAG,IAAK,EAAG,GAAI,CAAC,EAAG,IAAK,EAAG,IAAKC,MAAO,cACrFE,EAAG,CAAEH,MAAO,CAAC,CAAC,EAAG,IAAK,GAAI,CAAC,EAAG,IAAK,GAAI,CAAC,IAAK,IAAK,IAAKC,MAAO,aAC9DG,EAAG,CAAEJ,MAAO,CAAC,CAAC,EAAG,IAAK,GAAI,CAAC,EAAG,IAAK,GAAI,CAAC,EAAG,IAAK,MAAOC,MAAO,cAC9DI,EAAG,CAAEL,MAAO,CAAC,CAAC,IAAK,KAAM,CAAC,IAAK,MAAOC,MAAO,cAC7CK,EAAG,CAAEN,MAAO,CAAC,CAAC,EAAG,IAAK,KAAM,CAAC,IAAK,IAAK,GAAI,CAAC,EAAG,EAAG,IAAKC,MAAO,aAC9DM,EAAG,CAAEP,MAAO,CAAC,CAAC,EAAG,EAAG,GAAI,CAAC,IAAK,IAAK,KAAM,CAAC,EAAG,IAAK,IAAKC,MAAO,cAC9DO,EAAG,CAAER,MAAO,CAAC,CAAC,IAAK,IAAK,GAAI,CAAC,EAAG,IAAK,KAAM,CAAC,EAAG,EAAG,IAAKC,MAAO,cAGnDQ,EAAkB,WAC7B,IAAMC,EAAeC,KAAKC,MAAMD,KAAKE,UAAYC,OAAOC,KAAKjB,GAAYD,OAAS,IAClF,OAAQa,GACN,KAAK,EACH,OAAOZ,EAAU,EACnB,KAAK,EACH,OAAOA,EAAU,EACnB,KAAK,EACH,OAAOA,EAAU,EACnB,KAAK,EACH,OAAOA,EAAU,EACnB,KAAK,EACH,OAAOA,EAAU,EACnB,KAAK,EACH,OAAOA,EAAU,EACnB,KAAK,EACH,OAAOA,EAAU,EACnB,QAEE,OADAkB,QAAQC,MAAM,2BAA4BP,GACnCZ,EAAW,KCvFlBoB,EAAmD,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC1D,OAAO,cAACC,EAAD,CAAYnB,MAAOH,EAAWqB,GAAMlB,SAG9BoB,iBAAKH,GAEdE,EAAazC,IAAO2C,IAAV,8PAEK,SAACzC,GAAD,OAAOA,EAAEoB,SAEA,SAACpB,GAAD,OAAOA,EAAEoB,SACV,SAACpB,GAAD,OAAOA,EAAEoB,SACX,SAACpB,GAAD,OAAOA,EAAEoB,SACR,SAACpB,GAAD,OAAOA,EAAEoB,S,iBCRxBsB,EAAoC,SAAC,GAK3C,IAJLC,EAII,EAJJA,UACA3D,EAGI,EAHJA,SACA4D,EAEI,EAFJA,SACAC,EACI,EADJA,aAEA,OACE,eAACC,EAAD,CAAiBjD,OAAQ+C,GAAY5D,EAArC,UACG4D,GAAY,cAAC,IAAD,IACb,eAACG,EAAD,CAAclD,OAAQ+C,GAAY5D,EAAlC,UACE,6BAAK4D,EAAW,mBAAqB,eACrC,6BACGA,EACG,wBACA,mCAEN,cAACI,EAAD,UAAYL,EAAUM,eAAe,QACrC,cAACC,EAAD,CAAchE,UAAU,eAAeS,QAASkD,EAAhD,SACE,iCAASD,EAAW,SAAW,uBAOnCE,EAAkBhD,IAAO2C,IAAV,sOAOR,SAACzC,GAAD,OAAQA,EAAEH,OAAS,GAAK,KAM/BkD,EAAejD,IAAO2C,IAAV,qmBAWP,SAACzC,GAAD,OAAQA,EAAEH,OAASf,EAAcA,KACtB,SAACkB,GAAD,OAClBA,EAAEH,OAAF,UAAcf,EAAd,gBAAkCA,EAAlC,SACyB,SAACkB,GAAD,OAAQA,EAAEH,OAAS,QAAUf,KAC3C,SAACkB,GAAD,OAAQA,EAAEH,OAAS,aAAe,cAkB3CqD,EAAepD,IAAOC,OAAV,8NACIjB,EAEEA,GASlBkE,EAAYlD,IAAOqD,GAAV,8LAGcrE,EAA+BA,GCjG7C,MAA0B,qCCGnCsE,EAAiB,CACrB,mBACA,uBACA,wBACA,sBACA,iBACA,kBAGWC,EAAuB,WAClC,OACE,cAACC,EAAD,CAAapE,UAAU,yCAAvB,SACE,cAACqE,EAAD,UACGH,EAAKI,KAAI,SAACC,EAAOC,GAAR,OACR,eAACC,EAAD,WACE,cAACC,EAAD,CACE1E,UAAU,sBACVwE,IAAKA,EACLG,IAAKC,IAEP,iCAASL,MANUC,WAczBJ,EAAcxD,IAAO2C,IAAV,kHAMXc,EAAazD,IAAOiE,GAAV,8EAMVJ,EAAiB7D,IAAOkE,GAAV,6QAadJ,EAAa9D,IAAOmE,KAAV,kPAIU,SAACjE,GAAD,OAAOA,EAAE6D,OAGK,SAAC7D,GAAD,OAAOA,EAAE0D,OCpDpCQ,EAA8B,SAAC,GAAgC,IAAD,IAA7B3D,aAA6B,MAArB,GAAqB,EAAjBtB,EAAiB,EAAjBA,WAClDkF,EAAQ5D,EAAMS,OAAST,EAAM,GAAGS,OAAS,EAC/C,OACE,eAACoD,GAAD,CAAcD,MAAOA,EAArB,UACG5D,EAAMiD,KAAI,SAACa,EAAaC,GAAd,OACTD,EAAIb,KAAI,SAACe,EAAYC,GAAb,OACN,cAACC,EAAD,CAA0CnC,KAAMiC,EAAK,IAArD,UAAuBD,EAAvB,YAAgCE,UAGnCvF,GAAc,cAACyF,GAAD,QAKRN,GAAetE,IAAO2C,IAAV,mMAGS,SAACzC,GAAD,OAAOA,EAAEmE,SAO9BO,GAAU5E,IAAO2C,IAAV,8HAME3D,GC/BhB6F,GAAYzE,MAAMC,KAAKD,MADf,IAC6B,kBACzC,IAAIA,MAFQ,GAEKE,KAAK,CAAC,EAAG,aAGfwE,GAAgC,SAAC,GAGvC,IAFLC,EAEI,EAFJA,cACA5F,EACI,EADJA,WAEA,OACE,eAACmF,GAAD,CAAcD,MAVJ,EAUV,UACGQ,GAAUnB,KAAI,SAACa,EAAaC,GAAd,OACbD,EAAIb,KAAI,SAACe,EAAYC,GACnB,YAA6BM,IAAzBD,EAAcP,IACVO,EAAcP,GAAOE,GAEvB,cAACC,EAAD,CAEEnC,KAAMuC,EAAcP,GAAOE,IAF7B,UACUF,EADV,YACmBE,IAMlB,cAACC,EAAD,CAA0CnC,KAAM,GAAhD,UAAuBgC,EAAvB,YAAgCE,UAG1CvF,GAAc,cAACyF,GAAD,QCjCRK,GAAgB,SAACxE,EAAiBsE,GAE7C,IAAIG,GAAa,EAQjB,OANAH,EAAcI,SAAQ,SAACZ,EAAyBC,GAA1B,OAA4CD,EAAIY,SAAQ,SAACV,EAAwBW,GACxF,IAATX,GAA6C,WAA/BhE,EAAM+D,GAAOY,EAAQ,GAAG,KACxCF,GAAa,SAIVA,GCVHG,GAAa,CAAC,GAAI,IAAK,IAAK,M,2BCSrBC,GAAW,SACtB9E,EACA+E,GACoB,IAAD,EACOC,mBAAmBrF,KAD1B,mBACZM,EADY,KACLgF,EADK,OAEmBD,mBAAiB,GAFpC,mBAEZE,EAFY,KAECC,EAFD,KA8CnB,OA1CAC,qBAAU,WACRD,EAAe,GACf,IAWME,EAAc,SAACC,GACnB,IAAMC,EAAqBD,EAAUpC,KAAI,SAACa,GAAD,OACvCA,EAAIb,KAAI,SAACe,GAAD,MAAuB,UAAZA,EAAK,GAAiB,CAAC,EAAG,SAAWA,QAgB1D,OAZAjE,EAAOS,UAAUkE,SAAQ,SAACZ,EAAsBzD,GAC9CyD,EAAIY,SAAQ,SAACa,EAAsBpF,GACnB,IAAVoF,IACFD,EAASjF,EAAIN,EAAOE,SAASI,GAAGF,EAAIJ,EAAOE,SAASE,GAAK,CACvDoF,EACAxF,EAAOyF,SAAW,SAAW,gBAOjCzF,EAAOyF,UACTV,IA9Bc,SAACQ,GAAD,OAChBA,EAASG,QAAO,SAACC,EAAe5B,GAC9B,OAAgD,IAA5CA,EAAI6B,WAAU,SAAC3B,GAAD,OAAsB,IAAZA,EAAK,OAC/BkB,GAAe,SAACU,GAAD,OAAUA,EAAO,KAChCF,EAAIG,QAAQ,IAAIlG,MAAM2F,EAAS,GAAG7E,QAAQZ,KAAK,CAAC,EAAG,WAC5C6F,IAETA,EAAII,KAAKhC,GACF4B,KACN,IAsBMK,CAAUT,IAGZA,GAGTN,GAAS,SAACY,GAAD,OAAUR,EAAYQ,QAC9B,CAAC7F,EAAQ+E,IAEL,CAAE9E,QAAOgF,WAAUC,gBC5Db,OAA0B,mCCiP1Be,OA9Nf,WAAgB,IAAD,EACmBjB,oBAAkB,GADrC,mBACNtG,EADM,KACIwH,EADJ,OAEuBlB,oBAAkB,GAFzC,mBAENrG,EAFM,KAEMwH,EAFN,OAGqBnB,mBAAiB,GAHtC,mBAGNoB,EAHM,KAGKC,EAHL,OAI6BrB,mBAAiB,GAJ9C,mBAINsB,EAJM,KAISC,EAJT,OAKqBvB,mBAAiB,GALtC,mBAKN3C,EALM,KAKKmE,EALL,OAM2BxB,oBAAkB,GAN7C,mBAMNyB,EANM,KAMQC,EANR,OCLU,WAAwB,IAAD,EACJ1B,mBACxC1D,IAAkBT,OAF0B,mBACvC0D,EADuC,KACxBoC,EADwB,OAKlB3B,mBAAsB,CAChD9E,SAAU,CAAEE,EAAG,EAAGE,EAAG,GACrBG,UAAWE,EAAW,GAAGE,MACzB4E,UAAU,IARkC,mBAKvCzF,EALuC,KAK/B4G,EAL+B,KAWxCC,EAAS,SAACC,GAEd,OADgBA,EAAO5D,KAAI,SAAC6D,EAAG3D,GAAJ,OAAY0D,EAAO5D,KAAI,SAAC8D,GAAD,OAASA,EAAI5D,SAChDF,KAAI,SAACa,GAAD,OAASA,EAAIkD,cAgC5BlC,EAAcmC,uBAAY,WAM9B,OALAN,EAAU,CACR1G,SAAU,CAAEE,EAAG+G,EAAqB7G,EAAG,GACvCG,UAAW8D,EACXkB,UAAU,IAELkB,EAAiBrF,IAAkBT,SACzC,CAAC0D,IAEJ,MAAO,CACLvE,SACAuE,gBACA6C,qBAvB2B,SAAClH,EAAoBuF,GAChD,OAAOmB,GAAU,SAACf,GAAD,oBAAC,gBACbA,GADY,IAEf3F,SAAU,CACRE,EAAGyF,EAAK3F,SAASE,EAAIF,EAASE,EAC9BE,EAAGuF,EAAK3F,SAASI,EAAIJ,EAASI,GAEhCmF,iBAiBFV,cACAsC,aA3CmB,SAACpH,GACpB,IAAMqH,EAAeC,KAAKC,MAAMD,KAAKE,UAAUzH,IAC/CsH,EAAa7G,UAAYoG,EAAOS,EAAa7G,WAI7C,IAFA,IAAIiH,EAAiBJ,EAAapH,SAASE,EACvCuH,EAAS,EACN5H,EAAeuH,EAAcrH,EAAO,CAAEG,EAAG,EAAGE,EAAG,KAGpD,GAFAgH,EAAapH,SAASE,GAAKuH,GAC3BA,IAAWA,GAAUA,EAAS,EAAI,GAAK,KAC1BL,EAAa7G,UAAU,GAAGC,OAGrC,OAFAmG,EAAOS,EAAa7G,gBACpB6G,EAAapH,SAASE,EAAIsH,GAI9Bd,EAAUU,KDZRM,GALF5H,EATW,EASXA,OACAuE,EAVW,EAUXA,cACA6C,EAXW,EAWXA,qBACArC,EAZW,EAYXA,YACAsC,EAbW,EAaXA,aAbW,EAgB4BvC,GACvC9E,EACA+E,GAFM9E,EAhBK,EAgBLA,MAAOgF,EAhBF,EAgBEA,SAhBF,EHfc,SAACC,GAAyB,IAAD,EAC1BF,mBAAiB,GADS,mBAC7C6C,EAD6C,KACtCC,EADsC,OAE5B9C,mBAAiB,GAFW,mBAE7C+C,EAF6C,KAEvCC,EAFuC,OAG1BhD,mBAAiB,GAHS,mBAG7CiD,EAH6C,KAGtCC,EAHsC,KAK9CC,EAAYjB,uBAAY,WACxBhC,EAAc,IAKhB4C,GAAS,SAACjC,GAAD,OAAUA,EAAOhB,GAAWK,EAAc,IAAM+C,EAAQ,MACjED,GAAQ,SAACnC,GAAD,OAAUA,EAAOX,QAE1B,CAAC+C,EAAO/C,IAMX,OAJAE,qBAAU,WACR+C,MACC,CAACA,EAAWjD,EAAa2C,IAErB,CAAEA,QAAOC,WAAUC,OAAMC,UAASC,QAAOC,YGiB9CE,CAtBW,EAgBYlD,aAKjB+C,EArBK,EAqBLA,MAAOF,EArBF,EAqBEA,KAAMF,EArBR,EAqBQA,MAAOK,EArBf,EAqBeA,SAAUF,EArBzB,EAqByBA,QAASF,EArBlC,EAqBkCA,SAG/C1C,qBAAU,WACR,IAAMiD,EAAaC,aAAaC,QAAQ,cAAgB,IACxD/B,EAAagC,SAASH,EAAY,OACjC,IAEH,IAAMI,EAAiB,WACrBvC,GAAY,GACZG,EAAa,GAETwB,EAAQ,GAAKA,EAAQxF,IACvBiG,aAAaI,QAAQ,YAArB,UAAqCb,IACrCrB,EAAaqB,GACbnB,GAAgB,MErDf,SAAqBiC,EAAsBC,GAGhD,IAAMC,EAAgBC,iBAAOH,GAE7BvD,qBAAU,WACRyD,EAAcE,QAAUJ,IACvB,CAACA,IAGJvD,qBAAU,WACR,GAAMwD,EAAO,CACX,IAAMI,EAAKC,aAAY,kBAAMJ,EAAcE,YAAWH,GACtD,OAAO,WACLM,cAAcF,OAGjB,CAACJ,IFyCJO,EAAY,WAEN1E,GAAcxE,EAAOsE,IACvBkE,IAIEV,EAAqB,IAAbE,EAAQ,KAClBC,GAAS,SAACrC,GAAD,OAAUA,EAAO,KAC1BQ,EAAa,KAAQ4B,EAAQ,GAAK,MAGpCmB,OACChD,GAEH,IAgCMiD,EAAgB,SAACC,GAElBvJ,EAAeC,EAAQC,EAAO,CAC7BG,EAAGkJ,EACHhJ,EAAG,KAGL8G,EAAqB,CAAEhH,EAAGkJ,EAAKhJ,EAAG,IAAK,IAIrCiJ,EAAY,WAEhBtE,EAAStF,KACToF,IACAmB,GAAY,GACZQ,GAAgB,GAChBL,EAAa,MACb6B,EAAS,GACTJ,EAAS,GACTE,EAAQ,IAGJwB,GAAY,WAChB,OAAK7K,GAMLwH,GAAc,SAACN,GAAD,OAAWA,KAClBQ,EAAaC,KANlBH,GAAc,SAACN,GAAD,OAAWA,KACzBU,EAAiBH,QACjBC,EAAa,KAOX+C,GAAO,WAA8B,IAA7BK,EAA4B,uDAAN,EAClC,IAAK1J,EAAeC,EAAQC,EAAO,CAAEG,EAAG,EAAGE,EAAGmJ,IAC5C,OAAOrC,EAAqB,CAAEhH,EAAG,EAAGE,EAAGmJ,IAAe,GAGxDrC,EAAqB,CAAEhH,EAAG,EAAGE,EAAGmJ,EAAc,IAAK,GAE/ChF,GAAcxE,EAAOsE,IACvBkE,KAUEiB,GAAa,WAAuC,IAAtCC,EAAqC,wDACvD,IAAKA,EAEH,OADAtD,EAAa,GACN+C,KAKT,IAFA,IAAIQ,GAAc,EACdC,EAAO,GACHD,GACNC,IACI9J,EAAeC,EAAQC,EAAO,CAAEG,EAAG,EAAGE,EAAGuJ,MAC3CD,GAAc,GAGlBR,GAAKS,IAGP,OACE,sBACEjL,UAAU,aACVkL,KAAK,SACLC,SAAU,EACVC,UA1GS,SAACC,GAEZ,GADAA,EAAEC,iBACExL,EACF,MAAc,WAAVuL,EAAEE,KAAoBzL,EACjB6K,SAET,EAEF,GAAc,UAAVU,EAAEE,IACJ,OAAOX,KAET,IAAK7K,EACH,OAAQsL,EAAEE,KACR,IAAK,YACHd,GAAe,GACf,MACF,IAAK,aACHA,EAAc,GACd,MACF,IAAK,YACHK,KACA,MACF,IAAK,UACHrC,EAAapH,GACb,MACF,IAAK,IACHyJ,IAAW,KAiFfU,QA7BU,SAACH,GACRvL,GAAaC,GAAwB,cAAVsL,EAAEE,KAChC9D,EAAa,KAAQ4B,EAAQ,GAAK,MAsBpC,UAOE,cAAC,EAAD,CACE5F,UAAWA,EACX3D,SAAUA,EACV4D,SAAUmE,EACVlE,aAAc,kBAAMgH,OAEtB,sBAAK3K,UAAU,QAAf,UACE,cAACyL,GAAD,yBACA,sBAAKzL,UAAU,aAAf,UACE,cAAC,EAAD,CAAOqB,MAAOA,EAAOtB,WAAYA,IACjC,wBAAOC,UAAU,qBAAjB,UACE,sBAAKA,UAAU,oEAAf,UACE,cAAC0L,GAAD,CAAe1L,UAAU,cAAzB,2BAAmDiJ,KACnD,cAACyC,GAAD,CAAe1L,UAAU,cAAzB,2BAAmDmJ,KACnD,cAACuC,GAAD,CAAe1L,UAAU,cAAzB,4BAAoDqJ,QAEtD,cAAC,EAAD,CACEvJ,SAAUA,EACVC,WAAYA,EACZE,gBAAiB0K,EACjBzK,gBAAiB0K,GACjB5K,UAAU,2BAEZ,cAAC2L,GAAD,UACE,cAAC,GAAD,CACEhG,cAAeA,EACf5F,WAAYA,GAAcD,MAG9B,cAAC,EAAD,IACA,eAAC8L,GAAD,CAAkB5L,UAAU,sDAA5B,UACE,oBAAIA,UAAU,OAAd,uBACA,oBAAIA,UAAU,sBAAd,SACGyD,EAAUM,eAAe,iBAKlC,sBAAK/D,UAAU,oBAAf,UACE,sBAAKA,UAAU,qCAAf,UACE,cAAC6L,GAAD,CAASrH,IAAK,EAAGG,IAAKmH,GAAQrL,QAAS,kBAAMgI,EAAapH,MAC1D,cAACwK,GAAD,CAASrH,IAAK,EAAGG,IAAKmH,GAAQrL,QAAS,kBAAMgK,GAAe,MAC5D,cAACoB,GAAD,CAASrH,IAAK,EAAGG,IAAKmH,GAAQrL,QAAS,kBAAMgK,EAAc,MAC3D,cAACoB,GAAD,CAASrH,IAAK,EAAGG,IAAKmH,GAAQrL,QAAS,kBAAMqK,IAAW,SAE1D,cAAC,EAAD,CACEhL,SAAUA,EACVC,WAAYA,EACZE,gBAAiB0K,EACjBzK,gBAAiB0K,eAUvBa,GAAW7K,IAAOqD,GAAV,gNAKerE,GAMvB+L,GAAgB/K,IAAO2C,IAAV,8PAabqI,GAAmBhL,IAAO2C,IAAV,yKAQhBmI,GAAgB9K,IAAO2C,IAAV,6UAgBbsI,GAAUjL,IAAOC,OAAV,whBAUa,SAACC,GAAD,OAAOA,EAAE6D,OAGK,SAAC7D,GAAD,OAAOA,EAAE0D,O,MG3SjDuH,IAASC,OAAO,cAAC,GAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.15bc6c23.chunk.js","sourcesContent":["export const theme = {\n  primary: \"#1266F1\",\n  secondary: \"#B23CFD\",\n  success: \"#00B74A\",\n  danger: \"#F93154\",\n  warning: \"#FFA900\",\n  info: \"#39C0ED\",\n  light: \"#FBFBFB\",\n  dark: \"#262626\"\n}","import classnames from \"classnames\";\nimport styled from \"styled-components\";\nimport { theme } from \"../theme\";\n\ninterface ButtonsProps {\n  gameOver: boolean;\n  gamePaused: boolean;\n  className?: string;\n  handleStartGame: () => void;\n  handlePauseGame: () => void;\n}\n\nexport const Buttons: React.FC<ButtonsProps> = ({\n  gameOver,\n  gamePaused,\n  className = \"\",\n  handleStartGame,\n  handlePauseGame,\n}) => {\n  return (\n    <div\n      className={classnames(\"mx-auto\", className)}\n      style={{ minWidth: \"15rem\", maxWidth: \"20rem\" }}\n    >\n      <StartButton\n        className={`btn btn-block mb-2 ${\n          gameOver ? \"btn-primary\" : \"btn-secondary\"\n        }`}\n        disabled={gamePaused}\n        onClick={handleStartGame}\n      >\n        Start Again\n      </StartButton>\n      <PauseButton\n        active={gamePaused}\n        disabled={gameOver}\n        className=\"btn btn-block\"\n        onClick={handlePauseGame}\n      >\n        {gamePaused ? \"Resume Game\" : \"Pause Game\"}\n      </PauseButton>\n    </div>\n  );\n};\n\nconst StartButton = styled.button`\n  padding: 0.5rem 1rem;\n  text-transform: uppercase;\n  font-weight: 800;\n  font-size: 1.25rem;\n  border-radius: 1rem;\n`;\n\nconst PauseButton = styled(StartButton)<{ active: boolean }>`\n  border: 2px solid ${theme.warning};\n  color: ${(p) => (p.active ? theme.dark : theme.warning)};\n  background-color: ${(p) => (p.active ? theme.warning : \"transparent\")};\n`;\n","\nimport { PlayerProps, TETROMINOS_TYPE, Cell, TetrominosShape } from \"../types\"\n\nexport const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\nexport const createStage = (): Cell[][] => {\n  return Array.from(Array(STAGE_HEIGHT), () => new Array(STAGE_WIDTH).fill([0, 'clear']))\n}\n\nexport const checkCollision = (player: PlayerProps, stage: Cell[][], position: ({ x: number, y: number })): boolean => {\n  const { x: playerX, y: playerY } = player.position || {}\n  const { x: moveX, y: moveY } = position || {}\n  for (let y = 0; y < player.tetromino.length; y++) {\n    for (let x = 0; x < player.tetromino[y].length; x++) {\n      if (player.tetromino[y][x] !== 0) {\n        // Check inside game area, and not moving to a blocked cell\n        if (!stage[y + playerY + moveY] ||\n          !stage[y + playerY + moveY][x + playerX + moveX] ||\n          stage[y + playerY + moveY][x + playerX + moveX][1] !== 'clear'\n        ) {\n          return true\n        }\n      }\n    }\n  }\n  return false\n}\n\n\nexport const TETROMINOS: {\n  0: {\n    shape: TetrominosShape,\n    color: string;\n  },\n  I: {\n    shape: TetrominosShape,\n    color: string;\n  },\n  J: {\n    shape: TetrominosShape,\n    color: string;\n  },\n  L: {\n    shape: TetrominosShape,\n    color: string;\n  },\n  O: {\n    shape: TetrominosShape,\n    color: string;\n  },\n  S: {\n    shape: TetrominosShape,\n    color: string;\n  },\n  T: {\n    shape: TetrominosShape,\n    color: string;\n  },\n  Z: {\n    shape: TetrominosShape,\n    color: string;\n  },\n} = {\n  0: { shape: [[0]], color: '0,0,0' },\n  I: { shape: [[0, 'I', 0, 0], [0, 'I', 0, 0], [0, 'I', 0, 0], [0, 'I', 0, 0]], color: '80,227,230' },\n  J: { shape: [[0, 'J', 0], [0, 'J', 0], ['J', 'J', 0]], color: '36,95,223' },\n  L: { shape: [[0, 'L', 0], [0, 'L', 0], [0, 'L', 'L']], color: '223,173,36' },\n  O: { shape: [['O', 'O'], ['O', 'O']], color: '223,217,36' },\n  S: { shape: [[0, 'S', 'S'], ['S', 'S', 0], [0, 0, 0]], color: '48,211,56' },\n  T: { shape: [[0, 0, 0], ['T', 'T', 'T'], [0, 'T', 0]], color: '132,51,198' },\n  Z: { shape: [['Z', 'Z', 0], [0, 'Z', 'Z'], [0, 0, 0]], color: '227,78,78' },\n}\n\nexport const randomTetromino = (): TETROMINOS_TYPE => {\n  const randomNumber = Math.floor(Math.random() * (Object.keys(TETROMINOS).length - 1));\n  switch (randomNumber) {\n    case 0:\n      return TETROMINOS['I'];\n    case 1:\n      return TETROMINOS['J'];\n    case 2:\n      return TETROMINOS['L'];\n    case 3:\n      return TETROMINOS['O'];\n    case 4:\n      return TETROMINOS['S'];\n    case 5:\n      return TETROMINOS['T'];\n    case 6:\n      return TETROMINOS['Z'];\n    default:\n      console.error('Invalid Random Tetromino', randomNumber)\n      return TETROMINOS[0];\n  }\n}\n","import { memo } from \"react\";\nimport styled from \"styled-components\";\n\nimport { TETROMINOS } from \"../utils/gameHelpers\";\nimport { TetrominoType } from \"../types\";\n\nconst CellComponent: React.FC<{ type: TetrominoType }> = ({ type }) => {\n  return <StyledCell color={TETROMINOS[type].color} />;\n};\n\nexport default memo(CellComponent);\n\nconst StyledCell = styled.div<{ color: string }>`\n  aspect-ratio: 1;\n  background: rgba(${(p) => p.color}, 0.8);\n  border: 0.5rem solid;\n  border-bottom-color: rgba(${(p) => p.color}, 0.1);\n  border-right-color: rgba(${(p) => p.color}, 1);\n  border-top-color: rgba(${(p) => p.color}, 1);\n  border-left-color: rgba(${(p) => p.color}, 0.3);\n`;\n","import styled from \"styled-components\";\nimport ReactConfetti from \"react-confetti\";\nimport { theme } from \"../theme\";\n\ninterface GameOverProps {\n  highscore: number;\n  gameOver: boolean;\n  topScore: boolean;\n  startNewGame: () => void;\n}\n\nexport const GameOver: React.FC<GameOverProps> = ({\n  highscore,\n  gameOver,\n  topScore,\n  startNewGame,\n}) => {\n  return (\n    <GameOverOverlay active={topScore || gameOver}>\n      {topScore && <ReactConfetti />}\n      <HighscoreBox active={topScore || gameOver}>\n        <h1>{topScore ? \"Congratulations!\" : \"Game Over!\"}</h1>\n        <h2>\n          {topScore\n            ? \"on your new highscore\"\n            : \"Bad luck, the score to beat is\"}\n        </h2>\n        <Highscore>{highscore.toLocaleString(\"en\")}</Highscore>\n        <StyledButton className=\"btn btn-dark\" onClick={startNewGame}>\n          <strong>{topScore ? \"Thanks\" : \"Try Again\"}</strong>\n        </StyledButton>\n      </HighscoreBox>\n    </GameOverOverlay>\n  );\n};\n\nconst GameOverOverlay = styled.div<{ active: boolean }>`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  display: flex;\n  z-index: ${(p) => (p.active ? 1 : -1)};\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.75);\n`;\n\nconst HighscoreBox = styled.div<{ active: boolean }>`\n  max-width: 50%;\n  padding: 2rem 1rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  z-index: 5;\n  border-radius: 1rem;\n  transition: all 1500ms cubic-bezier(0.34, 1.56, 0.64, 1);\n  color: ${(p) => (p.active ? theme.light : theme.dark)};\n  background-color: ${(p) =>\n    p.active ? `${theme.dark}dd` : `${theme.light}dd`};\n  text-shadow: 2px 2px 2px ${(p) => (p.active ? \"black\" : theme.light)};\n  transform: ${(p) => (p.active ? \"scale(1.5)\" : \"scale(0)\")};\n  h1 {\n    font-size: 1.75rem;\n  }\n  h2 {\n    font-size: 1.25rem;\n  }\n  @media screen and (min-width: 992px) {\n    padding: 3rem 4rem;\n    h1 {\n      font-size: 3rem;\n    }\n    h2 {\n      font-size: 2rem;\n    }\n  }\n`;\n\nconst StyledButton = styled.button`\n  border: 2px solid ${theme.light};\n  &:hover {\n    border: 2px solid ${theme.light};\n    filter: invert(1);\n  }\n  @media screen and (min-width: 992px) {\n    font-size: 1.25rem;\n    padding: 0.5rem 1rem;\n  }\n`;\n\nconst Highscore = styled.h1`\n  font-size: 3em;\n  margin-bottom: 1rem;\n  text-shadow: 2px 2px 2px ${theme.danger}, -1px -1px 5px ${theme.danger};\n  @media screen and (min-width: 992px) {\n    font-size: 5em;\n  }\n`;\n","export default __webpack_public_path__ + \"static/media/keyboard.4dfe8221.png\";","import styled from \"styled-components\";\nimport keyboard from \"../assets/gfx/keyboard.png\";\n\nconst data: string[] = [\n  \"Rotate tetromino\",\n  \"Move left one square\",\n  \"Move right one square\",\n  \"Move tetromino down\",\n  \"Pause / resume\",\n  \"Drop tetromino\",\n];\n\nexport const Legend: React.FC<{}> = () => {\n  return (\n    <LegendBlock className=\"d-none d-lg-block rounded mx-auto mb-4\">\n      <StyledList>\n        {data.map((datum, idx) => (\n          <StyledListItem key={idx}>\n            <LegendIcon\n              className=\"d-inline-block mr-3\"\n              idx={idx}\n              img={keyboard}\n            ></LegendIcon>\n            <strong>{datum}</strong>\n          </StyledListItem>\n        ))}\n      </StyledList>\n    </LegendBlock>\n  );\n};\n\nconst LegendBlock = styled.div`\n  padding: 1rem;\n  background-color: rgba(255, 255, 255, 0.8);\n  max-width: 20rem;\n`;\n\nconst StyledList = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding: 0;\n`;\n\nconst StyledListItem = styled.li`\n  display: flex;\n  align-items: center;\n  margin-bottom: 0.75rem;\n  padding-bottom: 0.75rem;\n  border-bottom: 3px solid rgba(0, 0, 0, 0.75);\n  &:last-of-type {\n    margin-bottom: 0;\n    padding-bottom: 0;\n    border-bottom: 0;\n  }\n`;\n\nconst LegendIcon = styled.span<{ idx: number; img: string }>`\n  display: block;\n  width: 100px;\n  height: 40px;\n  background-image: url(${(p) => p.img});\n  background-size: 100% 600%;\n  background-repeat: no-repeat;\n  background-position: 0 calc(-40px * ${(p) => p.idx});\n  max-height: 100%;\n`;\n","import styled from \"styled-components\";\n\nimport CellComponent from \"./Cell\";\nimport { Cell } from \"../types\";\nimport { theme } from \"../theme\";\n\ninterface StageProps {\n  stage: Cell[][];\n  gamePaused: boolean;\n}\n\nexport const Stage: React.FC<StageProps> = ({ stage = [], gamePaused }) => {\n  const width = stage.length ? stage[0].length : 0;\n  return (\n    <StyledTetris width={width}>\n      {stage.map((row: Cell[], rowId: number) =>\n        row.map((cell: Cell, cellId: number) => (\n          <CellComponent key={`${rowId}-${cellId}`} type={cell[0]} />\n        ))\n      )}\n      {gamePaused && <Overlay />}\n    </StyledTetris>\n  );\n};\n\nexport const StyledTetris = styled.div<{ width: number }>`\n  position: relative;\n  display: grid;\n  grid-template-columns: repeat(${(p) => p.width}, 1fr);\n  grid-gap: 1px;\n  background: #333;\n  border: 6px solid grey;\n  width: 100%;\n`;\n\nexport const Overlay = styled.div`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-color: ${theme.dark};\n`;\n","import { StyledTetris, Overlay } from \".\";\nimport { TetrominosShape, Cell } from \"../types\";\nimport CellComponent from \"./Cell\";\n\ninterface UpNextProps {\n  nextTetromino: TetrominosShape;\n  gamePaused: boolean;\n}\n\nconst WIDTH = 4;\nconst miniStage = Array.from(Array(WIDTH), () =>\n  new Array(WIDTH).fill([0, \"clear\"])\n);\n\nexport const UpNext: React.FC<UpNextProps> = ({\n  nextTetromino,\n  gamePaused,\n}) => {\n  return (\n    <StyledTetris width={WIDTH}>\n      {miniStage.map((row: Cell[], rowId: number) =>\n        row.map((cell: Cell, cellId: number) => {\n          if (nextTetromino[rowId] !== undefined) {\n            if (!!nextTetromino[rowId][cellId]) {\n              return (\n                <CellComponent\n                  key={`${rowId}-${cellId}`}\n                  type={nextTetromino[rowId][cellId]}\n                />\n              );\n            }\n          }\n          return <CellComponent key={`${rowId}-${cellId}`} type={0} />;\n        })\n      )}\n      {gamePaused && <Overlay />}\n    </StyledTetris>\n  );\n};\n","import { Cell, TetrominoOptions, TetrominosShape } from \"../types\";\n\nexport const checkGameOver = (stage: Cell[][], nextTetromino: TetrominosShape): boolean => {\n\n  let isGameOver = false;\n\n  nextTetromino.forEach((row: TetrominoOptions[], rowId: number) => row.forEach((cell: TetrominoOptions, colId: number) => {\n    if (cell !== 0 && stage[rowId][colId + 4][1] === \"merged\") {\n      isGameOver = true;\n    }\n  }));\n\n  return isGameOver;\n}\n","import { useState, useEffect, useCallback } from \"react\";\n\nconst linePoints = [40, 100, 300, 1200];\n\nexport const useGameStatus = (rowsCleared: number) => {\n  const [score, setScore] = useState<number>(0);\n  const [rows, setRows] = useState<number>(0);\n  const [level, setLevel] = useState<number>(0);\n\n  const calcScore = useCallback(() => {\n    if (rowsCleared > 0) {\n      // For some reason the rowsCleared is being doubled...\n      // this shouldn't happen, it could be to do with the double rendering...\n      // anyway, that is what we are dividing rows cleared by 2.\n      // This only occurs if the app is not wrapped in strict mode (index.tsx).\n      setScore((prev) => prev + linePoints[rowsCleared - 1] * (level + 1));\n      setRows((prev) => prev + rowsCleared);\n    }\n  }, [level, rowsCleared]);\n\n  useEffect(() => {\n    calcScore();\n  }, [calcScore, rowsCleared, score]);\n\n  return { score, setScore, rows, setRows, level, setLevel };\n};\n","import { useState, useEffect } from \"react\";\n\nimport { createStage } from \".\";\nimport { TetrominoType, PlayerProps, Cell } from \"../types\";\n\ninterface useStageReturn {\n  stage: Cell[][];\n  setStage: React.Dispatch<React.SetStateAction<Cell[][]>>;\n  rowsCleared: number;\n}\n\nexport const useStage = (\n  player: PlayerProps,\n  resetPlayer: () => void\n): useStageReturn => {\n  const [stage, setStage] = useState<Cell[][]>(createStage());\n  const [rowsCleared, setRowsCleared] = useState<number>(0);\n\n  useEffect(() => {\n    setRowsCleared(0);\n    const sweepRows = (newStage: Cell[][]) =>\n      newStage.reduce((acc: Cell[][], row: Cell[]) => {\n        if (row.findIndex((cell) => cell[0] === 0) === -1) {\n          setRowsCleared((prev) => prev + 1);\n          acc.unshift(new Array(newStage[0].length).fill([0, \"clear\"]));\n          return acc;\n        }\n        acc.push(row);\n        return acc;\n      }, [] as Cell[][]);\n\n    const updateStage = (prevStage: Cell[][]) => {\n      const newStage: Cell[][] = prevStage.map((row) =>\n        row.map((cell) => (cell[1] === \"clear\" ? [0, \"clear\"] : cell))\n      );\n\n      // Draw\n      player.tetromino.forEach((row: TetrominoType[], y: number) => {\n        row.forEach((value: TetrominoType, x: number) => {\n          if (value !== 0) {\n            newStage[y + player.position.y][x + player.position.x] = [\n              value,\n              player.collided ? \"merged\" : \"clear\",\n            ];\n          }\n        });\n      });\n\n      // Check if we collided\n      if (player.collided) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n\n      return newStage;\n    };\n\n    setStage((prev) => updateStage(prev));\n  }, [player, resetPlayer]);\n\n  return { stage, setStage, rowsCleared };\n};\n","export default __webpack_public_path__ + \"static/media/arrows.fcbe1e38.png\";","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Stage, Buttons, UpNext, Legend, GameOver } from \"./components\";\n\nimport {\n  useStage,\n  usePlayer,\n  createStage,\n  checkCollision,\n  useInterval,\n  useGameStatus,\n  checkGameOver,\n} from \"./utils\";\nimport { PlayerProps } from \"./types\";\nimport { theme } from \"./theme\";\n\nimport arrows from \"./assets/gfx/arrows.png\";\n\nfunction App() {\n  const [gameOver, setGameOver] = useState<boolean>(false);\n  const [gamePaused, setGamePaused] = useState<boolean>(false);\n  const [gameSpeed, setGameSpeed] = useState<number>(0);\n  const [prePauseSpeed, setPrePauseSpeed] = useState<number>(0);\n  const [highscore, setHighscore] = useState<number>(0);\n  const [showConfetti, setShowConfetti] = useState<boolean>(false);\n\n  const {\n    player,\n    nextTetromino,\n    updatePlayerPosition,\n    resetPlayer,\n    playerRotate,\n  } = usePlayer();\n\n  const { stage, setStage, rowsCleared } = useStage(\n    player as PlayerProps,\n    resetPlayer as () => void\n  );\n\n  const { level, rows, score, setLevel, setRows, setScore } =\n    useGameStatus(rowsCleared);\n\n  useEffect(() => {\n    const _highscore = localStorage.getItem(\"highscore\") || \"0\";\n    setHighscore(parseInt(_highscore, 10));\n  }, []);\n\n  const handleGameOver = () => {\n    setGameOver(true);\n    setGameSpeed(0);\n\n    if (score > 0 && score > highscore) {\n      localStorage.setItem(\"highscore\", `${score}`);\n      setHighscore(score);\n      setShowConfetti(true);\n    }\n    return;\n  };\n\n  useInterval(() => {\n    //Check gameover - if next tetris peice will end up on top of a merged peice.\n    if (checkGameOver(stage, nextTetromino)) {\n      handleGameOver();\n    }\n\n    // Increase level when player has cleared 10 rows\n    if (rows > (level + 1) * 10) {\n      setLevel((prev) => prev + 1);\n      setGameSpeed(1000 / (level + 1) + 200);\n    }\n\n    drop();\n  }, gameSpeed);\n\n  const move = (e: React.KeyboardEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    if (gameOver) {\n      if (e.key === \"Escape\" && gameOver) {\n        return startGame();\n      }\n      return;\n    }\n    if (e.key === \"Enter\") {\n      return pauseGame();\n    }\n    if (!gamePaused) {\n      switch (e.key) {\n        case \"ArrowLeft\":\n          moveLaterally(-1);\n          break;\n        case \"ArrowRight\":\n          moveLaterally(1);\n          break;\n        case \"ArrowDown\":\n          playerDrop();\n          break;\n        case \"ArrowUp\":\n          playerRotate(stage);\n          break;\n        case \" \":\n          playerDrop(true);\n          break;\n      }\n    }\n  };\n\n  const moveLaterally = (dir: number) => {\n    if (\n      !checkCollision(player, stage, {\n        x: dir,\n        y: 0,\n      })\n    ) {\n      updatePlayerPosition({ x: dir, y: 0 }, false);\n    }\n  };\n\n  const startGame = () => {\n    // Reset All\n    setStage(createStage());\n    resetPlayer();\n    setGameOver(false);\n    setShowConfetti(false);\n    setGameSpeed(1200);\n    setLevel(0);\n    setScore(0);\n    setRows(0);\n  };\n\n  const pauseGame = () => {\n    if (!gamePaused) {\n      setGamePaused((prev) => !prev);\n      setPrePauseSpeed(gameSpeed);\n      setGameSpeed(0);\n      return;\n    }\n    setGamePaused((prev) => !prev);\n    return setGameSpeed(prePauseSpeed);\n  };\n\n  const drop = (linesToDrop: number = 1) => {\n    if (!checkCollision(player, stage, { x: 0, y: linesToDrop })) {\n      return updatePlayerPosition({ x: 0, y: linesToDrop }, false);\n    }\n\n    updatePlayerPosition({ x: 0, y: linesToDrop - 1 }, true);\n\n    if (checkGameOver(stage, nextTetromino)) {\n      handleGameOver();\n    }\n  };\n\n  const keyUp = (e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (!gameOver && !gamePaused && e.key === \"ArrowDown\") {\n      setGameSpeed(1000 / (level + 1) + 200);\n    }\n  };\n\n  const playerDrop = (pressedSpacebar: boolean = false) => {\n    if (!pressedSpacebar) {\n      setGameSpeed(0);\n      return drop();\n    }\n\n    let hasCollided = false;\n    let next = 0;\n    while (!hasCollided) {\n      next++;\n      if (checkCollision(player, stage, { x: 0, y: next })) {\n        hasCollided = true;\n      }\n    }\n    drop(next);\n  };\n\n  return (\n    <div\n      className=\"my-app p-4\"\n      role=\"button\"\n      tabIndex={0}\n      onKeyDown={move}\n      onKeyUp={keyUp}\n    >\n      <GameOver\n        highscore={highscore}\n        gameOver={gameOver}\n        topScore={showConfetti}\n        startNewGame={() => startGame()}\n      />\n      <div className=\"w-100\">\n        <AppTitle>TETRIS APP</AppTitle>\n        <div className=\"tetris-app\">\n          <Stage stage={stage} gamePaused={gamePaused} />\n          <aside className=\"w-100 tetris-aside\">\n            <div className=\"d-flex flex-column align-items-center justify-content-around mb-3\">\n              <StyledDisplay className=\"input-group\">{`Score:  ${score}`}</StyledDisplay>\n              <StyledDisplay className=\"input-group\">{`Rows:   ${rows}`}</StyledDisplay>\n              <StyledDisplay className=\"input-group\">{`Level:   ${level}`}</StyledDisplay>\n            </div>\n            <Buttons\n              gameOver={gameOver}\n              gamePaused={gamePaused}\n              handleStartGame={startGame}\n              handlePauseGame={pauseGame}\n              className=\"d-none d-lg-block mb-4\"\n            />\n            <UpNextWrapper>\n              <UpNext\n                nextTetromino={nextTetromino}\n                gamePaused={gamePaused || gameOver}\n              />\n            </UpNextWrapper>\n            <Legend />\n            <HighscoreWrapper className=\"w-100 d-none d-lg-flex flex-column text-center px-5\">\n              <h2 className=\"mb-2\">Highscore</h2>\n              <h2 className=\"h1 font-weight-bold\">\n                {highscore.toLocaleString(\"en\")}\n              </h2>\n            </HighscoreWrapper>\n          </aside>\n        </div>\n        <div className=\"d-block d-lg-none\">\n          <div className=\"d-flex justify-content-around mb-3\">\n            <Control idx={0} img={arrows} onClick={() => playerRotate(stage)} />\n            <Control idx={2} img={arrows} onClick={() => moveLaterally(-1)} />\n            <Control idx={3} img={arrows} onClick={() => moveLaterally(1)} />\n            <Control idx={1} img={arrows} onClick={() => playerDrop(true)} />\n          </div>\n          <Buttons\n            gameOver={gameOver}\n            gamePaused={gamePaused}\n            handleStartGame={startGame}\n            handlePauseGame={pauseGame}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\nconst AppTitle = styled.h1`\n  display: block;\n  color: white;\n  text-align: center;\n  padding: 0.5rem;\n  text-shadow: 2px 2px 2px ${theme.danger};\n  @media screen and (min-width: 576px) {\n    padding: 2rem;\n  }\n`;\n\nconst UpNextWrapper = styled.div`\n  display: none;\n  @media screen and (min-width: 576px) {\n    display: block;\n    margin: 0 0 1.5rem;\n    width: 12rem;\n  }\n  @media screen and (min-width: 992px) {\n    margin: 0 auto 1.5rem;\n    width: 15rem;\n  }\n`;\n\nconst HighscoreWrapper = styled.div`\n  margin: 0 auto 1.5rem;\n  padding: 1rem;\n  background-color: rgba(255, 255, 255, 0.8);\n  max-width: 20rem;\n  border-radius: 0.25rem;\n`;\n\nconst StyledDisplay = styled.div`\n  background-color: #111;\n  border-radius: 1rem;\n  max-width: 20rem;\n  margin: 0 0 0.5rem 0;\n  color: white;\n  border: 4px solid grey;\n  font-weight: 800;\n  font-size: 1rem;\n  padding: 0.75rem 1rem;\n  text-align: center;\n  @media screen and (min-width: 768px) {\n    font-size: 1.25rem;\n  }\n`;\n\nconst Control = styled.button<{ idx: number; img: string }>`\n  position: relative;\n  display: block;\n  width: 75px;\n  height: 75px;\n  border: 0;\n  background-color: transparent;\n  border-radius: 1rem;\n  padding: 0;\n  margin: 0.25rem;\n  background-image: url(${(p) => p.img});\n  background-size: 100% 400%;\n  background-repeat: no-repeat;\n  background-position: 0 calc(-75px * ${(p) => p.idx});\n  transition: 50ms all cubic-bezier(0.34, 1.56, 0.64, 1);\n  transform: translate(0, 0);\n  &:active {\n    transform: translate(1px, 1px);\n  }\n  &:focus {\n    outline: none;\n  }\n`;\n","import { useState, useCallback } from \"react\";\n\nimport { checkCollision, randomTetromino, STAGE_WIDTH, TETROMINOS } from \"./\";\n\nimport { Cell, PlayerProps, Position, TetrominosShape } from \"../types\";\n\ninterface usePlayerReturn {\n  player: PlayerProps;\n  nextTetromino: TetrominosShape;\n  updatePlayerPosition: (position: Position, collided: boolean) => void;\n  resetPlayer: () => void;\n  playerRotate: (stage: Cell[][]) => void;\n}\n\nexport const usePlayer = (): usePlayerReturn => {\n  const [nextTetromino, setNextTetromino] = useState<TetrominosShape>(\n    randomTetromino().shape\n  );\n\n  const [player, setPlayer] = useState<PlayerProps>({\n    position: { x: 0, y: 0 },\n    tetromino: TETROMINOS[0].shape,\n    collided: false,\n  });\n\n  const rotate = (matrix: TetrominosShape): TetrominosShape => {\n    const rotated = matrix.map((_, idx) => matrix.map((col) => col[idx]));\n    return rotated.map((row) => row.reverse());\n  };\n\n  const playerRotate = (stage: Cell[][]) => {\n    const clonedPlayer = JSON.parse(JSON.stringify(player)) as PlayerProps;\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino) as TetrominosShape;\n\n    let storedPosition = clonedPlayer.position.x;\n    let offset = 1;\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\n      clonedPlayer.position.x += offset;\n      offset = -(offset + (offset > 0 ? 1 : -1));\n      if (offset > clonedPlayer.tetromino[0].length) {\n        rotate(clonedPlayer.tetromino);\n        clonedPlayer.position.x = storedPosition;\n        return;\n      }\n    }\n    setPlayer(clonedPlayer);\n  };\n\n  const updatePlayerPosition = (position: Position, collided: boolean) => {\n    return setPlayer((prev) => ({\n      ...prev,\n      position: {\n        x: prev.position.x + position.x,\n        y: prev.position.y + position.y,\n      },\n      collided,\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      position: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n      tetromino: nextTetromino,\n      collided: false,\n    });\n    return setNextTetromino(randomTetromino().shape);\n  }, [nextTetromino]);\n\n  return {\n    player,\n    nextTetromino,\n    updatePlayerPosition,\n    resetPlayer,\n    playerRotate,\n  };\n};\n","import { useEffect, useRef } from \"react\";\n\nexport function useInterval(callback: () => void, delay: number) {\n  // const savedCallback = useRef<ReturnType<typeof setInterval>>();\n\n  const savedCallback = useRef(callback);\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    if (!!delay) {\n      const id = setInterval(() => savedCallback.current(), delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport \"./assets/styles/main.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}